// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  LAWYER
  STAFF
  CLIENT
}

enum CaseType {
  ADMINISTRATIVE
  CIVIL
  CRIMINAL
}

enum CaseStatus {
  ARRAIGNMENT
  PRETRIAL
  TRIAL
  PROMULGATION
  REMEDIES
  PRELIMINARY_CONFERENCE
  DECISION
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id            String    @id @default(cuid())
  name          String
  firstName     String?
  lastName      String?
  middleName    String?
  gender        Gender?
  birthday      DateTime?
  phone         String?
  email         String
  emailVerified Boolean   @default(false)
  role          UserRole  @default(CLIENT)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  // lawyerCases    Case[] @relation("LawyerCases")
  clientCases    Case[] @relation("ClientCases")

  createdAppointments Appointment[] @relation("CreatedAppointments")
  clientAppointments  Appointment[] @relation("ClientAppointments")

  notes         Note[]

  @@unique([email])
  @@map("user")
}

model Note {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Case {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        CaseType   @default(CIVIL)
  status      CaseStatus @default(PRELIMINARY_CONFERENCE)
  clientId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  client      User         @relation("ClientCases", fields: [clientId], references: [id])
  // tasks       Task[]
  documents   Document[]
  // appointments Appointment[]
  @@map("cases")
}


model Document {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String?
  size      Int?
  caseId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("documents")
}

enum AppointmentVariant {
  SUCCESS
  PRIMARY
  DEFAULT
  WARNING
  DANGER
}

model Appointment {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  variant     AppointmentVariant @default(PRIMARY)
  
  createdById String
  createdBy   User     @relation("CreatedAppointments", fields: [createdById], references: [id])

  clientId    String?
  client      User?    @relation("ClientAppointments", fields: [clientId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  

    @@map("appointments")

  }

  

  enum TemplateState {

    ACTIVE

    ARCHIVED

  }

  

  model Template {

    id        String   @id @default(cuid())

    name      String

    content   String   @db.Text  // HTML content with {{placeholders}}

    variables Json     // Array of variable names extracted from content

    status    TemplateState @default(ACTIVE)

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

  

    @@map("templates")

  }

  